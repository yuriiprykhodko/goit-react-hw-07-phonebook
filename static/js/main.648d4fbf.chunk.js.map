{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Container/Container.js","redux/contacts/contacts-selection.js","redux/services/contacts-api.js","redux/contacts/contactsOperations.js","components/Form/Form.js","components/ContactsList/ContactsList.js","components/ContactsListItem/ContactsListItem.js","components/Filter/Filter.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","saveContactRequest","saveContactSuccess","saveContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateFilterAction","itemsReduser","createReducer","actions","state","action","payload","filter","contact","id","isLoadingReduser","errorReduser","_","filterReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","devTools","process","Container","title","children","className","getFilterReducer","getItems","getVisibleContacts","createSelector","items","name","toLowerCase","includes","a","axios","get","data","defaults","baseURL","fetchContacts","addContact","post","deleteContact","delete","dispatch","contactsActions","api","number","contactToSave","useForm","key","useState","Form","setName","setNumber","useSelector","useDispatch","handleChange","evt","target","value","reset","onSubmit","preventDefault","find","alert","contactsOperations","type","pattern","required","onChange","ContactsList","ContactsListItem","visibleContacts","contactsSelection","useEffect","map","onClick","onDeleteButtonClick","Filter","e","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.648d4fbf.chunk.js","sourcesContent":["\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nconst saveContactRequest = createAction(\"contacts/saveContactRequest\");\r\nconst saveContactSuccess = createAction(\"contacts/saveContactSuccess\");\r\nconst saveContactError = createAction(\"contacts/saveContactError\");\r\n\r\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\r\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\r\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nconst updateFilterAction = createAction(\"updateFilter\");\r\n\r\nexport default {\r\n  saveContactRequest,\r\n  saveContactSuccess,\r\n  saveContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateFilterAction,\r\n  fetchContactsRequest,\r\n  fetchContactsError,\r\n  fetchContactsSuccess,\r\n};","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst itemsReduser = createReducer([], {\r\n  [actions.fetchContactsSuccess]: (state, action) => {\r\n    return action.payload;\r\n  },\r\n  [actions.deleteContactSuccess]: (state, action) => {\r\n    return state.filter((contact) => contact.id !== action.payload);\r\n  },\r\n  [actions.saveContactSuccess]: (state, action) => {\r\n    return [...state, action.payload];\r\n  },\r\n});\r\n\r\nconst isLoadingReduser = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true,\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.fetchContactsError]: () => false,\r\n\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n\r\n  [actions.saveContactRequest]: () => true,\r\n  [actions.saveContactSuccess]: () => false,\r\n  [actions.saveContactError]: () => false,\r\n});\r\n\r\nconst errorReduser = createReducer(null, {\r\n  [actions.fetchContactsError]: (_, action) => action.payload,\r\n  [actions.fetchContactsRequest]: () => null,\r\n\r\n  [actions.deleteContactError]: (_, action) => action.payload,\r\n  [actions.deleteContactRequest]: () => null,\r\n\r\n  [actions.saveContactError]: (_, action) => action.payload,\r\n  [actions.saveContactRequest]: () => null,\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.updateFilterAction]: (_, action) => {\r\n    return action.payload;\r\n  },\r\n});\r\n\r\nexport default combineReducers({\r\n  itemsReduser,\r\n  isLoadingReduser,\r\n  errorReduser,\r\n  filterReducer,\r\n});","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nimport reducer from \"./contacts/contacts-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: reducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;","import \"./Container.css\";\r\nconst Container = ({ title, children }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport default Container;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getFilterReducer = (state) => state.contacts.filterReducer;\r\n\r\nexport const getItems = (state) => state.contacts.itemsReduser;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getFilterReducer, getItems],\r\n  (filter, items) =>\r\n    items.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3004\";\r\n\r\nasync function fetchContacts() {\r\n  const { data } = await axios.get(\"/contacts\");\r\n  return data;\r\n}\r\n\r\nfunction addContact(contact) {\r\n  return axios.post(\"/contacts\", contact);\r\n}\r\n\r\nfunction deleteContact(id) {\r\n  return axios.delete(`/contacts/${id}`);\r\n}\r\n\r\nexport default { fetchContacts, addContact, deleteContact };","import contactsActions from \"./contacts-actions\";\r\nimport api from \"../services/contacts-api\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  try {\r\n    const contacts = await api.fetchContacts();\r\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(contactsActions.fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = (id) => async (dispatch) => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n  try {\r\n    const deleteContact = await api.deleteContact(id);\r\n    \r\n    dispatch(contactsActions.deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(contactsActions.deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst saveContact = (name, number) => async (dispatch) => {\r\n  const contact = {\r\n    \r\n    name,\r\n    number,\r\n  };\r\n  dispatch(contactsActions.saveContactRequest(contact));\r\n  try {\r\n    const contactToSave = await api.addContact(contact);\r\n    dispatch(contactsActions.saveContactSuccess(contactToSave.data));\r\n  } catch (error) {\r\n    dispatch(contactsActions.saveContactError(error));\r\n  }\r\n};\r\n\r\nexport default { fetchContacts, deleteContact, saveContact };","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./Form.css\";\r\nimport { getItems } from \"redux/contacts/contacts-selection\";\r\nimport contactsOperations from \"redux/contacts/contactsOperations\";\r\n\r\nconst useForm = (key) => {\r\n  const [state, setState] = useState(\"\");\r\n\r\n  return [state, setState];\r\n};\r\n\r\nconst Form = () => {\r\n  const [name, setName] = useForm(\"name\");\r\n  const [number, setNumber] = useForm(\"number\");\r\n  const contacts = useSelector(getItems);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (evt) => {\r\n    const { name, value } = evt.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    if (contacts.find((contact) => contact.name === name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n    dispatch(contactsOperations.saveContact(name, number));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <label className=\"label\">\r\n          Name\r\n          <input\r\n            className=\"input\"\r\n            value={name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Number\r\n          <input\r\n            className=\"input\"\r\n            value={number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","const ContactsList = ({ children }) => {\r\n  return <ul>{children}</ul>;\r\n};\r\n\r\nexport default ContactsList;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./ContactsListItem.css\";\r\n\r\nimport { contactsSelection, contactsOperations } from \"redux/contacts\";\r\nconst ContactsListItem = () => {\r\n  const visibleContacts = useSelector(contactsSelection.getVisibleContacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  \r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  const onDeleteButtonClick = (id) =>\r\n    dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n   \r\n    visibleContacts.map(({ id, name, number }) => (\r\n      <li className=\"listItem\" key={id}>\r\n        {name}:{number}\r\n        <button\r\n          className=\"button\"\r\n          onClick={() => onDeleteButtonClick(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))\r\n  );\r\n};\r\n\r\nexport default ContactsListItem;","import { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./Filter.css\";\r\nimport { contactsActions, contactsSelection } from \"redux/contacts\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelection.getFilterReducer);\r\n  const dispatch = useDispatch();\r\n  const onChange = (e) =>\r\n    dispatch(contactsActions.updateFilterAction(e.target.value));\r\n  return (\r\n    <label className=\"label\">\r\n      Find contacts by name\r\n      <input className=\"input\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\n\nimport Container from \"./components/Container\";\nimport Form from \"./components/Form\";\nimport ContactsList from \"./components/ContactsList\";\nimport ContactsListItem from \"./components/ContactsListItem\";\nimport Filter from \"./components/Filter\";\n\nfunction App() {\n  return (\n    <>\n      <Container title=\"Phonebook\">\n        <Form />\n      </Container>\n      <Container title=\"Contacts\">\n        <Filter />\n        <ContactsList>\n          <ContactsListItem />\n        </ContactsList>\n      </Container>\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store.store}> */}\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}